'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents the impression-tracking URIs for both an {@link InLine} and any
 * {@link Wrapper}.
 */
var ViewableImpression = exports.ViewableImpression = function () {
  function ViewableImpression() {
    _classCallCheck(this, ViewableImpression);

    this._id = null;
    this._viewables = [];
    this._notViewables = [];
    this._viewUndetermineds = [];
  }

  // Attribute(s).

  /**
   * The ad server ID of this viewability impression pixel.
   *
   * @type {string}
   */


  _createClass(ViewableImpression, [{
    key: 'id',
    get: function get() {
      return this._id;
    },
    set: function set(value) {
      this._id = value;
    }

    // Children.

    /**
     * The URIs that direct the video player to a tracking resource file that the
     * video player should request at the time that criteria is met for a viewable
     * impression.
     *
     * @type {string[]}
     */

  }, {
    key: 'viewables',
    get: function get() {
      return this._viewables;
    }

    /**
     * The URIs that direct the video player to a tracking resource file that the
     * video player should request if the ad is executed but never meets criteria
     * for a viewable impression.
     *
     * @type {string[]}
     */

  }, {
    key: 'notViewables',
    get: function get() {
      return this._notViewables;
    }

    /**
     * The URIs that direct the video player to a tracking resource file that the
     * video player should request if the player cannot determine whether criteria
     * is met for a viewable impression.
     *
     * @type {string[]}
     */

  }, {
    key: 'viewUndetermineds',
    get: function get() {
      return this._viewUndetermineds;
    }
  }, {
    key: '$type',
    get: function get() {
      return 'ViewableImpression';
    }
  }]);

  return ViewableImpression;
}();