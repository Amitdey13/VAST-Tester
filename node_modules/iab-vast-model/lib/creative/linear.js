'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a linear within a {@link Creative}.
 */
var Linear = exports.Linear = function () {
  function Linear() {
    _classCallCheck(this, Linear);

    this._skipoffset = null;
    this._duration = null;
    this._mezzanine = null;
    this._mediaFiles = [];
    this._interactiveCreativeFiles = [];
    this._adParameters = null;
    this._videoClicks = null;
    this._trackingEvents = null;
    this._icons = [];
  }

  // Attribute(s).

  /**
   * The time interval after which this linear creative can be skipped.
   *
   * @type {TimeOffset}
   */


  _createClass(Linear, [{
    key: 'skipoffset',
    get: function get() {
      return this._skipoffset;
    },
    set: function set(value) {
      this._skipoffset = value;
    }

    // Children.

    /**
     * The duration of this linear creative in seconds.
     *
     * @type {number}
     */

  }, {
    key: 'duration',
    get: function get() {
      return this._duration;
    },
    set: function set(value) {
      this._duration = value;
    }

    /**
     * The URI of the raw mezzanine file for this linear creative, intended for
     * video transcoding.
     *
     * @type {string}
     */

  }, {
    key: 'mezzanine',
    get: function get() {
      return this._mezzanine;
    },
    set: function set(value) {
      this._mezzanine = value;
    }

    /**
     * The media files for this linear creative.
     *
     * @type {MediaFile[]}
     */

  }, {
    key: 'mediaFiles',
    get: function get() {
      return this._mediaFiles;
    }

    /**
     * The interactive creative files for this linear creative.
     *
     * @type {InteractiveCreativeFile[]}
     */

  }, {
    key: 'interactiveCreativeFiles',
    get: function get() {
      return this._interactiveCreativeFiles;
    }

    /**
     * The ad parameters for this linear creative.
     *
     * @type {string}
     */

  }, {
    key: 'adParameters',
    get: function get() {
      return this._adParameters;
    },
    set: function set(value) {
      this._adParameters = value;
    }

    /**
     * The video click tracking configuration for this linear creative.
     *
     * @type {VideoClicks}
     */

  }, {
    key: 'videoClicks',
    get: function get() {
      return this._videoClicks;
    },
    set: function set(value) {
      this._videoClicks = value;
    }

    /**
     * The event-tracking configuration for this linear creative.
     *
     * @type {TrackingEvents}
     */

  }, {
    key: 'trackingEvents',
    get: function get() {
      return this._trackingEvents;
    },
    set: function set(value) {
      this._trackingEvents = value;
    }

    /**
     * The icons for this linear creative.
     *
     * @type {Icon[]}
     */

  }, {
    key: 'icons',
    get: function get() {
      return this._icons;
    }
  }, {
    key: '$type',
    get: function get() {
      return 'Linear';
    }
  }]);

  return Linear;
}();