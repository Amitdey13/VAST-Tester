'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents companion ads within a {@link Creative}.
 */
var CompanionAds = exports.CompanionAds = function () {
  function CompanionAds() {
    _classCallCheck(this, CompanionAds);

    this._required = null;
    this._companions = [];
    this._xmlElement = null;
  }

  // Attribute(s).

  /**
   * Determines which companion creative to display when multiple companions
   * are supplied and whether the ad can be displayed without its companion
   * creative. Either `"all"`, `"any"`, or `"none"`.
   *
   * @type {string}
   */


  _createClass(CompanionAds, [{
    key: 'required',
    get: function get() {
      return this._required;
    },
    set: function set(value) {
      this._required = value;
    }

    // Children.

    /**
     * The companion ads.
     *
     * @type {Companion[]}
     */

  }, {
    key: 'companions',
    get: function get() {
      return this._companions;
    }

    // Content.

    /**
     * The `<CompanionAds>` XML DOM element.
     *
     * @type {Element}
     */

  }, {
    key: 'xmlElement',
    get: function get() {
      return this._xmlElement;
    },
    set: function set(value) {
      this._xmlElement = value;
    }
  }, {
    key: '$type',
    get: function get() {
      return 'CompanionAds';
    }
  }]);

  return CompanionAds;
}();