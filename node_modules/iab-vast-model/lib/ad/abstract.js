'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractAd = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sortedListItem = require('../util/sorted-list-item');

var _sortedList = require('../util/sorted-list');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abstract class for ads (i.e., {@link InLine} and {@link Wrapper}).
 *
 * @abstract
 * @protected
 */
var AbstractAd = exports.AbstractAd = function (_SortedListItem) {
  _inherits(AbstractAd, _SortedListItem);

  function AbstractAd() {
    _classCallCheck(this, AbstractAd);

    var _this = _possibleConstructorReturn(this, (AbstractAd.__proto__ || Object.getPrototypeOf(AbstractAd)).call(this));

    _this._id = null;
    _this._conditionalAd = false;
    _this._adSystem = null;
    _this._impressions = [];
    _this._pricing = null;
    _this._errors = [];
    _this._viewableImpression = null;
    _this._verifications = [];
    _this._extensions = [];
    _this._creatives = new _sortedList.SortedList();
    return _this;
  }

  // Attribute(s).

  /**
   * The ad server-defined identifier for this ad.
   *
   * @type {string}
   */


  _createClass(AbstractAd, [{
    key: 'id',
    get: function get() {
      return this._id;
    },
    set: function set(value) {
      this._id = value;
    }

    /**
     * The conditional attribute for this ad.
     *
     * @type {boolean}
     */

  }, {
    key: 'conditionalAd',
    get: function get() {
      return this._conditionalAd;
    },
    set: function set(value) {
      this._conditionalAd = value;
    }

    // Children.

    /**
     * The ad system for this ad.
     *
     * @type {AdSystem}
     */

  }, {
    key: 'adSystem',
    get: function get() {
      return this._adSystem;
    },
    set: function set(value) {
      this._adSystem = value;
    }

    /**
     * The impression-tracking configurations for this ad.
     *
     * @type {Impression[]}
     */

  }, {
    key: 'impressions',
    get: function get() {
      return this._impressions;
    }

    /**
     * The pricing configuration for this ad.
     *
     * @type {Pricing}
     */

  }, {
    key: 'pricing',
    get: function get() {
      return this._pricing;
    },
    set: function set(value) {
      this._pricing = value;
    }

    /**
     * The error-tracking URIs for this ad.
     *
     * @type {string[]}
     */

  }, {
    key: 'errors',
    get: function get() {
      return this._errors;
    }

    /**
     * The viewable impression for this ad.
     *
     * @type {ViewableImpression}
     */

  }, {
    key: 'viewableImpression',
    get: function get() {
      return this._viewableImpression;
    },
    set: function set(value) {
      this._viewableImpression = value;
    }

    /**
     * The verifications for this ad.
     *
     * @type {Verification[]}
     */

  }, {
    key: 'verifications',
    get: function get() {
      return this._verifications;
    }

    /**
     * The extensions for this ad.
     *
     * @type {Extension[]}
     */

  }, {
    key: 'extensions',
    get: function get() {
      return this._extensions;
    }

    /**
     * The creatives for this ad.
     *
     * @type {SortedList.<Creative>}
     */

  }, {
    key: 'creatives',
    get: function get() {
      return this._creatives;
    }
  }]);

  return AbstractAd;
}(_sortedListItem.SortedListItem);